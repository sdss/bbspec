== 2D PSF Extraction Data Model ==
2011-06-22

This documents the initial data model for the 2D spectral extraction R&D.
It will evolve, and it will be refactored for any external release of
data products for production code.


== Compact PSF format: spArcPSF-[br][12]-[FRAME].fits ==

This format records the PSF parameters only as measured at the location
of the arc lines.  Structurally it is the same as the following full PSF
format; it just has a much more limited set of Y values.  A separate piece
of code [to be written] will expand this compact PSF format into the full
PSF format, including interpolation in wavelength, outlier rejection, and
any tweaking of the X Y positions necessary to match the science frames.

--> This format is somewhat vestigial, but we may want to keep it as
    a placeholder of the idea of writing out the PSF as measured on the
    arc lines, to separate the problem of PSF measurement from noisy
    parameter interpolation across the image.


== Full PSF format: spBasisPSF-[br][12]-[FRAME].fits ==

HDU 0 keywords:

SIMPLE  =                    T / conforms to FITS standard
BITPIX  =                  -64 / array data type
NAXIS   =                    2 / number of array dimensions
NAXIS1  =                   65
NAXIS2  =                    5
EXTEND  =                    T
PSFTYPE = 'GAUSS2D '           / Rotated 2D Gaussian
NPIX_X  =                   60 / number of image pixels in the X-direction
NPIX_Y  =                   70 / number of image pixels in the Y-direction
NSPEC   =                    5 / number of spectra [NAXIS2]
NFLUX   =                   65 / number of flux bins per spectrum [NAXIS1]
PSFPARAM= 'X       '           / X position as a function of flux bin

PSFTYPE defines which kind of PSF is stored in this file,
and thus how to interpret the various HDU parameters.

PSFPARM defines which PSF parameter is stored in each HDU.
Detail: this isn't EXTNAME because fits doesn't allow HDU 0 to have
    an EXTNAME keyword.

The first 3 HDUs should be the same PSFPARAMs for any PSFTYPE:

HDU 0 : PSFPARAM = 'X'
HDU 1 : PSFPARAM = 'Y'
HDU 2 : PSFPARAM = 'LogLam'

The data for each of these is an (nfibers x nflux) array of values.

Note: HDU 1 Y values might correspond to image pixel rows, but they don't have to.

Additional HDUs are specific to the PSFTYPE.
For a given PSFTYPE, the order of the HDUs will be fixed.

=== PSFTYPE GAUSS2D ===

This is a toy rotated gaussian PSF format for testing.

HDU 3 : PSFPARAM = 'Amplitude'  Gaussian amplitude (currently fixed to 1.0)
HDU 4 : PSFPARAM = 'MajorAxis'  Gaussian sigma for the major axis
HDU 5 : PSFPARAM = 'MinorAxis'  Gaussian sigma for the minor axis
HDU 6 : PSFPARAM = 'Angle'  Rotation angle of MajorAxis wrt the x-axis

Note: "Amplitude" is a bit of a misnomer, it really should be the
integrated area of the PSF, i.e. the total normalization of the exponent
is Amplitude/(2*pi*MajorAxis*MinorAxis).

=== PSFTYPE PCA-PIX ===

This format is a PCA-like pixelated model such that

    pix = ConstImage + x*ImageX + y*ImageY + x*y*ImageXY + ...

HDU 3 : table with x and y exponents to use for each image model

    Columns IMODEL, XEXP, YEXP
    One row per model image

HDU 4 : table with x and y scale factors

    Columns IGROUP, X0, XSCALE, Y0, YSCALE
    One row per fiber
    
    The model images are separately calculated for groups of fibers
    (could be bundles, but doesn't have to be).  Within each group,
    the x and y dimensions are rescaled such that
    
        x = xscale * (xpix - x0)
        y = yscale * (ypix - y0)

HDU 5 : 4-D array with the PSF images

    Array[IGROUP, IMODEL, IY, IX]
    
e.g. to find the PSF for ifiber iflux:

    xpix = HDU0[ifiber, iflux]
    ypix = HDU1[ifiber, iflux]
    x0 = HDU4.X0[ifiber]
    y0 = HDU4.Y0[ifiber]
    xscale = HDU4.XSCALE[ifiber]
    yscale = HDU4.YSCALE[ifiber]    
    x = xscale*(xpix - x0)
    y = yscale*(ypix - y0)
    
    igroup = HDU4.IGROUP[ifiber]
    psf = [BlankImage]
    for imodel in range( len(HDU3) ):
        xexp = HDU3.XEXP[imodel]
        yexp = HDU3.YEXP[imodel]
        psf += x^xexp * y^yexp * HDU5[igroup, imodel]
    
=== PSFTYPE GAUSS-HERMITE ===

The PSFTYPE='GAUSS-HERMITE' format has the additional HDUs:
HDU 3 : PSFPARAM = 'sigma'      Gaussian sigma values of basis
HDU 4 : PSFPARAM = 'PGH(0,0)'   Pixelated Gauss-Hermite Order: (0,0)
Additional HDUs contain the additional Gauss-Hermite terms (i,j)
as defined by the PSFPARAM keyword.

--> The additional HDUs fo this format are polynomial coefficients
    as a function of wavelength, not the direct PSF parameters
    themselves.  Details need to be documented.


== Image: sdProc-[br][12]-[FRAME].fits ==

The image to be extracted must have dimensions matching the
NPIX_X and NPIX_Y keywords of the PSF file.

HDU 0 : noisy image pixel data
HDU 1 : pixel inverse variance
HDU 2 : optional, for testing : image before any pixel noise is applied


== Input Spectra ==

For testing: input known spectra which can be convolved with a PSF and
compared to extracted spectra.

HDU 0 : (nfiber x nflux) flux values


== Extracted Spectra ==

HDU 0 : Extracted re-convolved spectra [nfiber, nflux]
HDU 1 : Inverse variance of extracted re-convolved spectra [nfiber, nflux]
HDU 2 : Convolution kernel R [nspec, bandwidth, nflux]
HDU 3 : Original extracted spectra, before re-convolution [nfiber, nflux]
HDU 4 : Inverse covariance matrix of extracted spectra (A.T Ninv A)
        [Optional - data may be blank - only for small test cases]
        [nfiber*nflux, nfiber*nflux]
HDU 5 : Reconstructed model image [npix_y, npix_x]

Notes:
HDU 2 has the diagonal elements of the convolution kernel R in a format
which is useful for creating sparse matrices using scipy.sparse.dia_matrix.
For example, the matrix of diagonals

     1  2  3  4
    10 20 30 40
    11 12 13 14
        
results in a full matrix

    10  2  0  0
    11 20  3  0
     0 12 30  4
     0  0 13 40 

the HDU 2 format for R does *not* contain any elements for re-convolution
cross-talk between fibers.

